// CONVERSI√ìN DE TIPOS 

// LA CONVERSI√ìN DE TIPO EN JAVASCRIPT ES CUANDO UN VALOR DE UN TIPO DE DATO (COMO STRING, NUMBER, BOOLEAN, ETC...) SE TRANSFORMA AUTOM√ÅTICAMENTE O MANUALMENTE EN OTRO TIPO. JAVASCRIPT LO HACE A VECES POR SU CUENTA (CONVERSI√ìN IMPL√çCITA), Y OTRAS VECES T√ö LE DICES "¬°CAMBIA ESTO YA!" (CONVERSI√ìN EXPL√çCITA).   

// üîÑ TIPOS DE CONVERSION DE TIPO:

// ‚úÖ CONVERSI√ìN IMPL√çCITA 

// JAVASCRIPT INTENTA SER SIMP√ÅTICO Y CONVERTIR TIPOS POR TI, A VECES SIN AVISARTE... A VECES CON CONSECUENCIAS RARAS. AQU√ç JAVASCRIPT CONVIERTE EL '3' A STRING Y LO CONCATENA.

// EJEMPLO 1: 

let resultado1 = '5' + 3; // '53' 
console.log(resultado1);

// PERO SI USAMOS '-', NO ES TAN AMISTOSO:

// EJEMPLO 2: 

let resultado2 = '5' - 3; // 2
console.log(resultado2);

// AHORA CONVIERTE '5' A N√öMERO. BIEN RARO, ¬øNO?

// ‚úã CONVERSI√ìN EXPL√çCITA

// CUANDO T√ö LE DICES DIRECTAMENTE A JAVASCRIPT "QUIERO QUE ESO SEA DE OTRO TIPO".

// EJEMPLO 3: 

let numero = Number('42'); // 42 (n√∫mero)
let texto = String(123);  // '123' (string)
let booleano = Boolean(0); // false
console.log(numero);
console.log(texto);
console.log(booleano);

// POR EJEMPLO, 'alert' CONVIERTE AUTOM√ÅTICAMENTE CUALQUIER VALOR A STRING PARA MOSTRARLO. LAS OPERACIONES MATEM√ÅTICAS CONVIERTE LOS VALORES A N√öMEROS.

// TAMBI√âN HAY CASOS DONDE NECESITAMOS CONVERTIR DE MANERA EXPL√çCITA UN VALOR AL TIPO ESPERADO.

// ------------------------------------------------------------------------------------------------------------------------

// TOSTRING

// LA CONVERSI√ìN A STRING OCURRE CUANDO NECESITAMOS LA REPRESENTACI√ìN EN FORMA DE TEXTO DE UN VALOR.

// POR EJEMPLO, 'alert(value)' LO HACE PARA MOSTRAR EL VALOR COMO TEXTO.

// TAMBI√âN PODEMOS LLAMAR A LA FUNCI√ìN 'String(value)' PARA CONVERTIR UN VALOR A STRING.

let value = true;
console.log(typeof value); // boolean

value = String(value);
console.log(typeof value); // string

// ------------------------------------------------------------------------------------------------------------------------

// TONUMBER

// LA CONVERSI√ìN N√öMERICA OCURRE AUTOM√ÅTICAMENTE EN FUNCIONES MATEM√ÅTICAS Y EXPRESIONES.

// POR EJEMPLO, CUANDO SE DIVIDEN VALORES NO N√öMERICOS USANDO '/':

console.log("6" / "2"); // 3

// PODEMOS USAR LA FUNCI√ìN 'Number(value)' PARA CONVERTIR DE FORMA EXPL√çCITA DE UN VALOR A UN N√öMERO: 

let str = "123";
console.log(typeof str); // string

let num = Number(str); // se convierte en 123
console.log(typeof num); // number

// SI EL STRING NO ES UN N√öMERO V√ÅLIDO, EL RESULTADO DE LA CONVERSI√ìN SER√Å 'NaN'.

let age = Number("un texto arbitrario en vez de un n√∫mero");
console.log(age); // NaN, conversi√≥n fallida

let ejemplo1 = Number(undefined); // NaN, conversi√≥n fallida
console.log(ejemplo1); 
let ejemplo2 = Number(null); // conversi√≥n 0
console.log(ejemplo2); 
let ejemplo3 = Number(true); // conversi√≥n 1
console.log(ejemplo3); 
let ejemplo4 = Number(false); // conversi√≥n 0
console.log(ejemplo4); 
let ejemplo5 = Number(0); // conversi√≥n 0
console.log(ejemplo5);
let ejemplo6 = Number(1); // conversi√≥n 1
console.log(ejemplo6);
let ejemplo7 = Number(""); // conversi√≥n 0
console.log(ejemplo7); 
let ejemplo8 = Number(" "); // conversi√≥n 0
console.log(ejemplo8);
let ejemplo9 = Number("¬°Hola, Chicos!!!"); // NaN, conversi√≥n fallida
console.log(ejemplo9);
let ejemplo10 = Number("    123     "); // Se eliminan los espacios (incluye espacios, tabs \t, saltos de l√≠nea \n, etc.) al inicio y final del texto.
console.log(ejemplo10);
let ejemplo11 = Number("123z"); // NaN, conversi√≥n fallida
console.log(ejemplo11);

// TENGA EN CUENTA QUE 'null' Y 'undefined' SE COMPORTA DE DISTINTA MANERA AQU√ç: 'null' SE CONVIERTE EN 0 MIENTRAS QUE 'undefined' SE CONVIERTE EN 'NaN'.

// CASI TODAS LAS OPERACIONES MATEM√ÅTICAS CONVIERTEN VALORES A N√öMEROS. UNA EXCEPCI√ìN NOTABLE ES LA SUMA +. SI UNO DE LOS VALORES SUMADOS ES UN STRING EL OTRO VALOR ES CONVERTIDO A STRING.

// LUEGO, LOS CONCATENA (UNE):

console.log(1 + '2'); // '12' (string a la derecha)
console.log('1' + 2); // '12' (string a la izquierda)

// ESTO OCURRE SOLO SI AL MENOS UNO DE LOS ARGUMENTOS ES UN STRING, EN CASO CONTRARIO LOS VALORES SON CONVERTIDOS A N√öMERO.

// ------------------------------------------------------------------------------------------------------------------------

// TOBOOLEAN

// LA CONVERSI√ìN A BOOLEAN ES LA M√ÅS SIMPLE.

// OCURRE EN OPERACIONES L√ìGICAS (M√ÅS ADELANTE VEREMOS LOS CONDICIONALES Y OTRAS COSAS SIMILARES), PERO TAMBI√âN PUEDEN REALIZARSE DE FORMA EXPL√çCITA LLAMANDO A LA FUNCI√ìN 'Boolean(value)'.

// LAS REGLAS DE CONVERSI√ìN:

// LOS VALORES QUE SON INTUITIVAMENTE "vacios", como 0, "", null, undefined, y NaN, SE CONVIERTEN EN 'false'.

// OTROS VALORES SE CONVIERTEN EN 'true'.

console.log(Boolean(0)); // false
console.log(Boolean("0")); // true
console.log(Boolean(null)); // false
console.log(Boolean(undefined)); // false
console.log(Boolean(NaN)); // false
console.log(Boolean("")); // false
console.log(Boolean(1)); // true
console.log(Boolean("hola")); // true
console.log(Boolean(" ")); // true

// ------------------------------------------------------------------------------------------------------------------------

// RESUMEN

// LAS TRES CONVERSIONES DE TIPO M√ÅS USADAS SON A STRING, A N√öMERO Y A BOOLEAN.

// TOSTRING ‚Äì OCURRE CUANDO SE MUESTRA ALGO. SE PUEDE REALIZAR CON 'String(value)'. LA CONVERSI√ìN A STRING ES USUALMENTE OBVIA PARA LOS VALORES PRIMITIVOS.

// TONUMBER ‚Äì OCURRE EN OPERACIONES MATEM√ÅTICAS. SE PUEDE REALIZAR CON Number(value).

// LA CONVERSI√ìN SIGUE LAS REGLAS:


// VALOR                                                SE CONVIERTE EN‚Ä¶
// undefined	                                        NaN
// null	                                                0
// true / false	                                        1 / 0


// EL STRING ES LE√çDO "COMO ES", LOS ESPACIOS EN BLANCO (INCLUYE ESPACIOS, TABS \t, SALTOS DE L√çNEA \n, ETC.) TANTO AL INICIO COMO AL FINAL SON IGNORADOS. UN STRING VAC√çO SE CONVIERTE EN 0. UN ERROR ENTREGA 'NaN'.

// TOBOOLEAN ‚Äì OCURREN EN OPERACIONES L√ìGICAS. SE PUEDE REALIZAR CON Boolean(value).

// SIGUE LAS REGLAS:

// VALOR                                                SE CONVIERTE EN‚Ä¶
// 0, null, undefined, NaN, ""	                        false
// CUALQUIER OTRO VALOR	                                true

// LA MAYOR√çA DE ESTAS REGLAS SON F√ÅCILES DE ENTENDER Y RECORDAR. LAS EXCEPCIONES M√ÅS NOTABLES DONDE LA GENTE SUELE COMETER ERRORES SON:

// 'undefined' es 'NaN' COMO N√öMERO, NO 0.

// "0" Y TEXTOS QUE SOLO CONTIENEN ESPACIOS COMO " " SON TRUE COMO BOOLEAN.

// ------------------------------------------------------------------------------------------------------------------------